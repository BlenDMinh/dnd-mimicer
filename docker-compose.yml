services:
  api-server:
    container_name: mimicer-api-server
    build: ./mimicer-api-server
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - API_KEY=${API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_API_URL=${DISCORD_API_URL}
      - ANNOUCEMENT_CHANNEL_ID=${ANNOUCEMENT_CHANNEL_ID}
      - CAMPAIGN_CHANNEL_ID=${CAMPAIGN_CHANNEL_ID}
  database:
    container_name: mimicer-db
    image: postgres:17.2-alpine3.21
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s
  redis:
    container_name: mimicer-redis
    image: redis:7.4.1-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
